/home/aaron/.conda/envs/anon/include/python3.12/cpython/listobject.h: 44 - 44
--------------------------------------------------------------------------------

44:     list->ob_item[index] = value;
/home/aaron/python_al/python_al_dense_code/al_dense_cython_lib.c: 1271 - 13250
--------------------------------------------------------------------------------

1271:     return (size_t) i < (size_t) limit;
[...]
1899:     if (likely(L->allocated > len)) {
[...]
1906:         __Pyx_SET_SIZE(list, len + 1);
1907:         return 0;
1908:     }
1909:     return PyList_Append(list, x);
[...]
5838: ) {
[...]
5859:   __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
5860:   {
5861:     PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
5862:     if (__pyx_kwds) {
5863:       Py_ssize_t kw_args;
5864:       switch (__pyx_nargs) {
5865:         case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
5866:         CYTHON_FALLTHROUGH;
5867:         case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
[...]
5875:         if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
5876:           (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
5877:           kw_args--;
5878:         }
5879:         else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L3_error)
5880:         else goto __pyx_L5_argtuple_error;
5881:         CYTHON_FALLTHROUGH;
5882:         case  1:
5883:         if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_B)) != 0)) {
5884:           (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
5885:           kw_args--;
5886:         }
5887:         else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L3_error)
5888:         else {
5889:           __Pyx_RaiseArgtupleInvalid("matrix_scalar_multiply", 1, 2, 2, 1); __PYX_ERR(0, 86, __pyx_L3_error)
5890:         }
5891:       }
5892:       if (unlikely(kw_args > 0)) {
5893:         const Py_ssize_t kwd_pos_args = __pyx_nargs;
5894:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "matrix_scalar_multiply") < 0)) __PYX_ERR(0, 86, __pyx_L3_error)
5895:       }
5896:     } else if (unlikely(__pyx_nargs != 2)) {
5897:       goto __pyx_L5_argtuple_error;
5898:     } else {
5899:       values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
5900:       values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
5901:     }
5902:     __pyx_v_A = ((PyObject*)values[0]);
5903:     __pyx_v_B = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_B == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 86, __pyx_L3_error)
5904:   }
5905:   goto __pyx_L6_skip;
5906:   __pyx_L5_argtuple_error:;
5907:   __Pyx_RaiseArgtupleInvalid("matrix_scalar_multiply", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 86, __pyx_L3_error)
[...]
5917:   __Pyx_AddTraceback("al_dense_cython_lib.matrix_scalar_multiply", __pyx_clineno, __pyx_lineno, __pyx_filename);
5918:   __Pyx_RefNannyFinishContext();
5919:   return NULL;
5920:   __pyx_L4_argument_unpacking_done:;
5921:   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), (&PyList_Type), 1, "A", 1))) __PYX_ERR(0, 86, __pyx_L1_error)
[...]
5927:   __pyx_r = NULL;
[...]
5937: }
[...]
5944:   PyObject *__pyx_v_C = 0;
[...]
5958:   PyObject *__pyx_t_11 = NULL;
5959:   int __pyx_t_12;
5960:   int __pyx_t_13;
5961:   int __pyx_t_14;
5962:   PyObject *__pyx_t_15 = NULL;
[...]
5975:   if (unlikely(__pyx_v_A == Py_None)) {
5976:     PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
5977:     __PYX_ERR(0, 87, __pyx_L1_error)
5978:   }
5979:   __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_A); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 87, __pyx_L1_error)
5980:   __pyx_v_rows = __pyx_t_1;
[...]
5993:   __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_A, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
5994:   __Pyx_GOTREF(__pyx_t_2);
5995:   __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
5996:   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
5997:   __pyx_v_cols = __pyx_t_1;
[...]
6006:   __pyx_t_3 = (__pyx_v_rows - 1);
6007:   __pyx_t_4 = __pyx_t_3;
6008:   for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
[...]
6022:     __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_A, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
6023:     __Pyx_GOTREF(__pyx_t_2);
6024:     __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 91, __pyx_L1_error)
[...]
6031:     __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_A, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
6032:     __Pyx_GOTREF(__pyx_t_2);
6033:     __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 91, __pyx_L1_error)
6034:     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
6035:     __pyx_t_8 = (__pyx_t_1 != __pyx_t_7);
6036:     if (unlikely(__pyx_t_8)) {
[...]
6045:       __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_19al_dense_cython_lib_CustomError), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
6046:       __Pyx_GOTREF(__pyx_t_2);
6047:       __Pyx_Raise(__pyx_t_2, 0, 0, 0);
6048:       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
6049:       __PYX_ERR(0, 92, __pyx_L1_error)
[...]
6069:     __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
6070:     __Pyx_GOTREF(__pyx_t_2);
6071:     __pyx_t_5 = __pyx_v_rows;
6072:     __pyx_t_9 = __pyx_t_5;
6073:     for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
6074:       __pyx_8genexpr2__pyx_v__ = __pyx_t_10;
6075:       __pyx_t_11 = PyList_New(1 * ((__pyx_v_cols<0) ? 0:__pyx_v_cols)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 93, __pyx_L1_error)
6076:       __Pyx_GOTREF(__pyx_t_11);
6077:       { Py_ssize_t __pyx_temp;
6078:         for (__pyx_temp=0; __pyx_temp < __pyx_v_cols; __pyx_temp++) {
6079:           __Pyx_INCREF(__pyx_int_0);
6080:           __Pyx_GIVEREF(__pyx_int_0);
6081:           if (__Pyx_PyList_SET_ITEM(__pyx_t_11, __pyx_temp, __pyx_int_0)) __PYX_ERR(0, 93, __pyx_L1_error);
6082:         }
6083:       }
6084:       if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 93, __pyx_L1_error)
6085:       __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
6086:     }
6087:   } /* exit inner scope */
6088:   __pyx_v_C = ((PyObject*)__pyx_t_2);
[...]
6100:   for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
[...]
6112:     for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
[...]
6126:       __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_A, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
6127:       __Pyx_GOTREF(__pyx_t_2);
6128:       __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 97, __pyx_L1_error)
6129:       __Pyx_GOTREF(__pyx_t_11);
6130:       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
6131:       __pyx_t_2 = PyFloat_FromDouble(__pyx_v_B); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
6132:       __Pyx_GOTREF(__pyx_t_2);
6133:       __pyx_t_15 = PyNumber_Multiply(__pyx_t_11, __pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 97, __pyx_L1_error)
6134:       __Pyx_GOTREF(__pyx_t_15);
6135:       __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
6136:       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
6137:       __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_C, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
6138:       __Pyx_GOTREF(__pyx_t_2);
6139:       if (unlikely((__Pyx_SetItemInt(__pyx_t_2, __pyx_v_j, __pyx_t_15, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0))) __PYX_ERR(0, 97, __pyx_L1_error)
[...]
6170:   __Pyx_AddTraceback("al_dense_cython_lib.matrix_scalar_multiply", __pyx_clineno, __pyx_lineno, __pyx_filename);
[...]
8934:     if (s1 == s2) {
[...]
8956:     if (s1_is_unicode & s2_is_unicode) {
[...]
8963:         if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
[...]
8970:             hash1 = ((PyASCIIObject*)s1)->hash;
8971:             hash2 = ((PyASCIIObject*)s2)->hash;
8972:         #else
8973:             hash1 = ((PyUnicodeObject*)s1)->hash;
8974:             hash2 = ((PyUnicodeObject*)s2)->hash;
8975:         #endif
8976:             if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
8977:                 goto return_ne;
8978:             }
8979:         }
8980: #endif
8981:         kind = __Pyx_PyUnicode_KIND(s1);
8982:         if (kind != __Pyx_PyUnicode_KIND(s2)) {
8983:             goto return_ne;
8984:         }
8985:         data1 = __Pyx_PyUnicode_DATA(s1);
8986:         data2 = __Pyx_PyUnicode_DATA(s2);
8987:         if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
8988:             goto return_ne;
8989:         } else if (length == 1) {
8990:             goto return_eq;
8991:         } else {
8992:             int result = memcmp(data1, data2, (size_t)(length * kind));
[...]
8998:     } else if ((s1 == Py_None) & s2_is_unicode) {
8999:         goto return_ne;
9000:     } else if ((s2 == Py_None) & s1_is_unicode) {
9001:         goto return_ne;
9002:     } else {
9003:         int result;
9004:         PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
9005:         #if PY_MAJOR_VERSION < 3
9006:         Py_XDECREF(owned_ref);
9007:         #endif
9008:         if (!py_result)
[...]
9032:     for (i = 0; i < n; i++)
9033:     {
9034:         if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
9035:     }
9036:     for (i = 0; i < n; i++)
9037:     {
9038:         int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
9039:         if (unlikely(eq != 0)) {
9040:             if (unlikely(eq < 0)) return NULL;
9041:             return kwvalues[i];
[...]
9256:     PyErr_Format(PyExc_TypeError,
[...]
9280:     ternaryfunc call = Py_TYPE(func)->tp_call;
9281:     if (unlikely(!call))
9282:         return PyObject_Call(func, arg, kw);
9283:     #if PY_MAJOR_VERSION < 3
9284:     if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
9285:         return NULL;
9286:     #else
9287:     if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
9288:         return NULL;
9289:     #endif
9290:     result = (*call)(func, arg, kw);
9291:     Py_LeaveRecursiveCall();
9292:     if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
9293:         PyErr_SetString(
[...]
9732:     PyErr_Format(PyExc_TypeError,
[...]
9743:     if (unlikely(!j)) return NULL;
9744:     r = PyObject_GetItem(o, j);
[...]
9756:     if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
9757:         PyObject *r = PyList_GET_ITEM(o, wrapped_i);
9758:         Py_INCREF(r);
9759:         return r;
9760:     }
9761:     return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
[...]
13248:    int is_true = x == Py_True;
13249:    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
13250:    else return PyObject_IsTrue(x);
/home/aaron/.conda/envs/anon/include/python3.12/object.h: 220 - 797
--------------------------------------------------------------------------------

220:     return ob->ob_type;
[...]
233:     return  _PyVarObject_CAST(ob)->ob_size;
[...]
242:     return _Py_CAST(PY_INT32_T, op->ob_refcnt) < 0;
[...]
250:     return Py_TYPE(ob) == type;
[...]
643:     if (new_refcnt == 0) {
644:         return;
645:     }
646:     op->ob_refcnt_split[PY_BIG_ENDIAN] = new_refcnt;
[...]
700:     if (_Py_IsImmortal(op)) {
701:         return;
702:     }
703:     _Py_DECREF_STAT_INC();
704:     if (--op->ob_refcnt == 0) {
705:         _Py_Dealloc(op);
[...]
797:     if (op != _Py_NULL) {
/home/aaron/.conda/envs/anon/include/python3.12/cpython/floatobject.h: 16 - 16
--------------------------------------------------------------------------------

16:     return _PyFloat_CAST(op)->ob_fval;
/home/aaron/.conda/envs/anon/include/python3.12/cpython/unicodeobject.h: 250 - 326
--------------------------------------------------------------------------------

250:         return _Py_STATIC_CAST(void*, (_PyASCIIObject_CAST(op) + 1));
[...]
258:     data = _PyUnicodeObject_CAST(op)->data.any;
[...]
264:     if (PyUnicode_IS_COMPACT(op)) {
[...]
282:     return _PyASCIIObject_CAST(op)->length;
[...]
319:     if (kind == PyUnicode_1BYTE_KIND) {
320:         return _Py_STATIC_CAST(const Py_UCS1*, data)[index];
321:     }
322:     if (kind == PyUnicode_2BYTE_KIND) {
323:         return _Py_STATIC_CAST(const Py_UCS2*, data)[index];
324:     }
325:     assert(kind == PyUnicode_4BYTE_KIND);
326:     return _Py_STATIC_CAST(const Py_UCS4*, data)[index];
