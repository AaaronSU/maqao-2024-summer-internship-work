/home/aaron/.conda/envs/anon/include/python3.12/cpython/listobject.h: 44 - 44
--------------------------------------------------------------------------------

44:     list->ob_item[index] = value;
/home/aaron/python_al/python_al_dense_code/al_dense_cython_lib.c: 1271 - 13250
--------------------------------------------------------------------------------

1271:     return (size_t) i < (size_t) limit;
[...]
3810: ) {
[...]
3831:   __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
3832:   {
3833:     PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
3834:     if (__pyx_kwds) {
3835:       Py_ssize_t kw_args;
3836:       switch (__pyx_nargs) {
3837:         case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
3838:         CYTHON_FALLTHROUGH;
3839:         case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
[...]
3847:         if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A)) != 0)) {
3848:           (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
3849:           kw_args--;
3850:         }
3851:         else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 14, __pyx_L3_error)
3852:         else goto __pyx_L5_argtuple_error;
3853:         CYTHON_FALLTHROUGH;
3854:         case  1:
3855:         if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_B)) != 0)) {
3856:           (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
3857:           kw_args--;
3858:         }
3859:         else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 14, __pyx_L3_error)
3860:         else {
3861:           __Pyx_RaiseArgtupleInvalid("vector_addition", 1, 2, 2, 1); __PYX_ERR(0, 14, __pyx_L3_error)
3862:         }
3863:       }
3864:       if (unlikely(kw_args > 0)) {
3865:         const Py_ssize_t kwd_pos_args = __pyx_nargs;
3866:         if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "vector_addition") < 0)) __PYX_ERR(0, 14, __pyx_L3_error)
3867:       }
3868:     } else if (unlikely(__pyx_nargs != 2)) {
3869:       goto __pyx_L5_argtuple_error;
3870:     } else {
3871:       values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
3872:       values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
[...]
3879:   __Pyx_RaiseArgtupleInvalid("vector_addition", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 14, __pyx_L3_error)
[...]
3889:   __Pyx_AddTraceback("al_dense_cython_lib.vector_addition", __pyx_clineno, __pyx_lineno, __pyx_filename);
3890:   __Pyx_RefNannyFinishContext();
3891:   return NULL;
3892:   __pyx_L4_argument_unpacking_done:;
3893:   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), (&PyList_Type), 1, "A", 1))) __PYX_ERR(0, 14, __pyx_L1_error)
3894:   if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), (&PyList_Type), 1, "B", 1))) __PYX_ERR(0, 14, __pyx_L1_error)
[...]
3910: }
[...]
3938:   if (unlikely(__pyx_v_A == Py_None)) {
3939:     PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
3940:     __PYX_ERR(0, 15, __pyx_L1_error)
3941:   }
3942:   __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_A); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 15, __pyx_L1_error)
[...]
3952:   if (unlikely(__pyx_v_B == Py_None)) {
3953:     PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
3954:     __PYX_ERR(0, 16, __pyx_L1_error)
3955:   }
3956:   __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_B); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 16, __pyx_L1_error)
3957:   __pyx_t_2 = (__pyx_v_n != __pyx_t_1);
3958:   if (unlikely(__pyx_t_2)) {
[...]
3967:     __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_19al_dense_cython_lib_CustomError), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
3968:     __Pyx_GOTREF(__pyx_t_3);
3969:     __Pyx_Raise(__pyx_t_3, 0, 0, 0);
[...]
3989:   __pyx_t_3 = PyList_New(1 * ((__pyx_v_n<0) ? 0:__pyx_v_n)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
3990:   __Pyx_GOTREF(__pyx_t_3);
3991:   { Py_ssize_t __pyx_temp;
3992:     for (__pyx_temp=0; __pyx_temp < __pyx_v_n; __pyx_temp++) {
3993:       __Pyx_INCREF(__pyx_int_0);
[...]
4010:   for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
[...]
4024:     __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_A, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
[...]
4030:     __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_B, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 21, __pyx_L1_error)
4031:     __Pyx_GOTREF(__pyx_t_7);
4032:     __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 21, __pyx_L1_error)
4033:     __Pyx_GOTREF(__pyx_t_8);
4034:     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
4035:     __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
4036:     if (unlikely((__Pyx_SetItemInt(__pyx_v_result, __pyx_v_i, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0))) __PYX_ERR(0, 21, __pyx_L1_error)
[...]
4049:   __pyx_r = __pyx_v_result;
[...]
4065:   __Pyx_AddTraceback("al_dense_cython_lib.vector_addition", __pyx_clineno, __pyx_lineno, __pyx_filename);
[...]
8934:     if (s1 == s2) {
[...]
8956:     if (s1_is_unicode & s2_is_unicode) {
[...]
8963:         if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
[...]
8970:             hash1 = ((PyASCIIObject*)s1)->hash;
8971:             hash2 = ((PyASCIIObject*)s2)->hash;
8972:         #else
8973:             hash1 = ((PyUnicodeObject*)s1)->hash;
8974:             hash2 = ((PyUnicodeObject*)s2)->hash;
8975:         #endif
8976:             if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
8977:                 goto return_ne;
8978:             }
8979:         }
8980: #endif
8981:         kind = __Pyx_PyUnicode_KIND(s1);
8982:         if (kind != __Pyx_PyUnicode_KIND(s2)) {
8983:             goto return_ne;
8984:         }
8985:         data1 = __Pyx_PyUnicode_DATA(s1);
8986:         data2 = __Pyx_PyUnicode_DATA(s2);
8987:         if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
8988:             goto return_ne;
8989:         } else if (length == 1) {
8990:             goto return_eq;
8991:         } else {
8992:             int result = memcmp(data1, data2, (size_t)(length * kind));
[...]
8998:     } else if ((s1 == Py_None) & s2_is_unicode) {
8999:         goto return_ne;
9000:     } else if ((s2 == Py_None) & s1_is_unicode) {
9001:         goto return_ne;
9002:     } else {
9003:         int result;
9004:         PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
9005:         #if PY_MAJOR_VERSION < 3
9006:         Py_XDECREF(owned_ref);
9007:         #endif
9008:         if (!py_result)
[...]
9032:     for (i = 0; i < n; i++)
9033:     {
9034:         if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
9035:     }
9036:     for (i = 0; i < n; i++)
9037:     {
9038:         int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
9039:         if (unlikely(eq != 0)) {
9040:             if (unlikely(eq < 0)) return NULL;
9041:             return kwvalues[i];
[...]
9256:     PyErr_Format(PyExc_TypeError,
[...]
9280:     ternaryfunc call = Py_TYPE(func)->tp_call;
9281:     if (unlikely(!call))
9282:         return PyObject_Call(func, arg, kw);
9283:     #if PY_MAJOR_VERSION < 3
9284:     if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
9285:         return NULL;
9286:     #else
9287:     if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
9288:         return NULL;
9289:     #endif
9290:     result = (*call)(func, arg, kw);
9291:     Py_LeaveRecursiveCall();
9292:     if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
9293:         PyErr_SetString(
[...]
9732:     PyErr_Format(PyExc_TypeError,
[...]
9743:     if (unlikely(!j)) return NULL;
9744:     r = PyObject_GetItem(o, j);
[...]
9756:     if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
9757:         PyObject *r = PyList_GET_ITEM(o, wrapped_i);
9758:         Py_INCREF(r);
9759:         return r;
9760:     }
9761:     return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
[...]
9838:     if (unlikely(!j)) return -1;
9839:     r = PyObject_SetItem(o, j, v);
[...]
9848:         if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
9849:             PyObject* old = PyList_GET_ITEM(o, n);
[...]
9886:     return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
[...]
13248:    int is_true = x == Py_True;
13249:    if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
13250:    else return PyObject_IsTrue(x);
/home/aaron/.conda/envs/anon/include/python3.12/object.h: 220 - 797
--------------------------------------------------------------------------------

220:     return ob->ob_type;
[...]
233:     return  _PyVarObject_CAST(ob)->ob_size;
[...]
242:     return _Py_CAST(PY_INT32_T, op->ob_refcnt) < 0;
[...]
250:     return Py_TYPE(ob) == type;
[...]
642:     PY_UINT32_T new_refcnt = cur_refcnt + 1;
643:     if (new_refcnt == 0) {
644:         return;
645:     }
646:     op->ob_refcnt_split[PY_BIG_ENDIAN] = new_refcnt;
[...]
700:     if (_Py_IsImmortal(op)) {
701:         return;
702:     }
703:     _Py_DECREF_STAT_INC();
704:     if (--op->ob_refcnt == 0) {
705:         _Py_Dealloc(op);
[...]
797:     if (op != _Py_NULL) {
/home/aaron/.conda/envs/anon/include/python3.12/cpython/unicodeobject.h: 250 - 326
--------------------------------------------------------------------------------

250:         return _Py_STATIC_CAST(void*, (_PyASCIIObject_CAST(op) + 1));
[...]
258:     data = _PyUnicodeObject_CAST(op)->data.any;
[...]
264:     if (PyUnicode_IS_COMPACT(op)) {
[...]
282:     return _PyASCIIObject_CAST(op)->length;
[...]
319:     if (kind == PyUnicode_1BYTE_KIND) {
320:         return _Py_STATIC_CAST(const Py_UCS1*, data)[index];
321:     }
322:     if (kind == PyUnicode_2BYTE_KIND) {
323:         return _Py_STATIC_CAST(const Py_UCS2*, data)[index];
324:     }
325:     assert(kind == PyUnicode_4BYTE_KIND);
326:     return _Py_STATIC_CAST(const Py_UCS4*, data)[index];
